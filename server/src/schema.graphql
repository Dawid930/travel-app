type Query {
  travels: [Travel!]!
  travel(id: ID!): Travel
}

type Mutation {
  addTravel(input: AddTravelInput!): Travel!
  addTravelDay(input: AddTravelDayInput!): TravelDays!
  updateTravel(id: ID!, input: UpdateTravelInput!): Travel
  updateTravelDay(id: ID!, input: UpdateTravelDayInput!): TravelDays
  deleteTravel(id: ID!): Boolean
  deleteTravelDay(id: ID!): Boolean
}

type Travel {
  id: ID!
  title: String!
  country: String!
  location: String!
  description: String!
  author: String!
  travelCompanions: Int
  rating: Int
  dateRange: [DateRange]
  travelDays: [TravelDays]
}

type TravelDays {
  id: ID!
  daynumber: Int!
  date: String!
  description: String!
  author: String!
  travelId: String!
}

type DateRange {
  id: ID!
  start: String!
  end: String!
}

input DateRangeInput {
  start: String!
  end: String!
}

input AddTravelInput {
  title: String!
  country: String!
  location: String!
  description: String!
  author: String!
  travelCompanions: Int!
  rating: Int!
}

input UpdateTravelInput {
  title: String
  country: String
  location: String
  description: String
  author: String
  travelCompanions: Int
  rating: Int
}

input AddTravelDayInput {
  daynumber: Int!
  date: String!
  description: String!
  author: String!
  travelId: String!
}

input UpdateTravelDayInput {
  daynumber: Int
  date: String
  description: String
  author: String
  travelId: String
}

