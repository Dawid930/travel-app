type Query {
  travels(skip: Int, take: Int): [Travel!]!
  travel(id: ID!): Travel
}

type Mutation {
  addTravel(input: AddTravelInput!): Travel!
  addTravelDay(input: AddTravelDayInput!): TravelDays!
  updateTravel(id: ID!, input: UpdateTravelInput!): Travel
  updateTravelDay(id: ID!, input: UpdateTravelDayInput!): TravelDays
  deleteTravel(id: ID!): Deleted
  deleteTravelDay(id: ID!): Deleted
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type Travel {
  id: ID!
  title: String!
  country: String!
  location: String!
  description: String!
  travelCompanions: Int
  rating: Int
  dateRange: DateRange!
  travelDays: [TravelDays]
  addedBy: User
}

type TravelDays {
  id: ID!
  daynumber: Int!
  date: String!
  description: String!
  travelId: String!
  addedBy: User
}

type DateRange {
  id: ID!
  start: String
  end: String
}

input DateRangeInput {
  start: String
  end: String
}

input AddTravelInput {
  title: String!
  country: String!
  location: String!
  description: String!
  travelCompanions: Int!
  rating: Int!
  dateRange: DateRangeInput
}

input UpdateTravelInput {
  title: String
  country: String
  location: String
  description: String
  travelCompanions: Int
  rating: Int
  dateRange: DateRangeInput
}

input AddTravelDayInput {
  daynumber: Int!
  date: String!
  description: String!
  travelId: String!
}

input UpdateTravelDayInput {
  daynumber: Int
  date: String
  description: String
  travelId: String
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  travels: [Travel]
  travelDays: [TravelDays]
}

type Deleted {
  deleted: Boolean
}